name: Go - Build and Push

on:
  workflow_call:
    inputs:
      ecr-repository:
        required: true
        type: string
        description: 'The name of the ECR repository to push the Docker image to'
      aws-region:
        type: string
        description: 'The AWS region where the ECR repository is located'
      dockerfile:
        type: string
        description: 'The path to the Dockerfile to use for building the Docker image'
      platforms:
        type: string
        description: 'The target platforms for the Docker image build (e.g., linux/amd64, linux/arm64)'
      prefix:
        type: string
        description: 'A prefix to use for the Docker image tags'
      type:
        type: string
        description: 'The type of build (e.g., release, snapshot)'
      use-private-module:
        type: boolean
        description: 'Flag to indicate if a private module should be used in the build'
      github-owner:
        type: string
        description: 'The GitHub owner of the private module repository'

    secrets:
      ASSUME_ROLE:
        description: 'The role to assume for AWS operations'
        required: true
      GH_TOKEN:
        description: 'The GitHub token to use'
        required: true

    outputs:
      image-tag:
        description: "Image tag output from build workflow"
        value: ${{ jobs.build.outputs.image-tag }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: read
      statuses: write

    outputs:
      image-tag: ${{ steps.image-tag.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ASSUME_ROLE }}
          aws-region: ${{ inputs.aws-region }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr-repository }}
        with:
          images: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=${{ inputs.type }},prefix=${{ inputs.prefix }}-

      - name: Build and push docker image to Amazon ECR
        uses: docker/build-push-action@v5
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr-repository }}
        with:
          context: .
          push: true
          file: ${{ inputs.dockerfile }}
          platforms: ${{ inputs.platforms }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:buildcache
          cache-to: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:buildcache,mode=max,image-manifest=true,oci-mediatypes=true
          secrets: ${{ inputs.use-private-module && secrets.GH_TOKEN || '' }}
          build-args: ${{ inputs.use-private-module && 'GH_OWNER=${{ inputs.github-owner }}' || '' }}
   
      - name: Image Tag output
        id: image-tag
        run: |
          IMAGE_TAG=$(echo ${{ steps.meta.outputs.tags }} | awk -F':' '{print $NF}')
          echo "::notice title=Image tag::${IMAGE_TAG}"
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_ENV